# -*- coding: utf-8 -*-import urllib,urllib2,re,xbmcplugin,xbmcgui,sys,xbmc,xbmcaddon,os,random,urlparse,urlresolverfrom t0mm0.common.addon import Addonfrom t0mm0.common.net import Net as netaddon_id = 'plugin.video.erotik'selfAddon = xbmcaddon.Addon(id=addon_id)addon = Addon(addon_id, sys.argv)fanart = xbmc.translatePath(os.path.join('special://home/addons/' + addon_id , 'fanart.jpg'))icon = xbmc.translatePath(os.path.join('special://home/addons/' + addon_id, 'icon.PNG'))base = 'http://www.ero-tik.com/index.html'        def CATEGORIES():        req = urllib2.Request(base)        req.add_header('User-Agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')        response = urllib2.urlopen(req)        link=response.read()        response.close()        addDir2('[COLOR gold]New Videos[/COLOR]',base,1,icon,'',fanart)        match=re.compile('<li class=""><a href="(.+?)" class="">(.+?)</a></li>').findall(link)[:19]        mk = 1        for url, cat in match:                        addDir2(cat,url,2,icon,'',fanart)      def GETMOVIES(url,name):        req = urllib2.Request(url)        req.add_header('User-Agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')        response = urllib2.urlopen(req)        link=response.read()        response.close()        match=re.compile('<a href="(.+?)" class=".+?"><span class=".+?"><img src="(.+?)" alt="(.+?)" width=".+?"><span class=".+?"></span></span></a>').findall(link)        for url,img,name in match:                addLink(name,url,100,img,fanart,'')        xbmc.executebuiltin('Container.SetViewMode(500)')                def GETMOVIESCATS(url,name):        req = urllib2.Request(url)        req.add_header('User-Agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')        response = urllib2.urlopen(req)        link=response.read()        response.close()        match=re.compile('<a href="(.+?)" class=".+?"><span class=".+?"><img src="(.+?)" alt="(.+?)" width=".+?"><span class=".+?"></span></span></a>').findall(link)        for url,img,name in match:                addLink(name,url,100,img,fanart,'')        try:                match=re.compile('<a href="(.+?)">&raquo;</a>').findall(link)[0]                addDir2('Next Page >>',match,2,icon,'',fanart)        except:pass        xbmc.executebuiltin('Container.SetViewMode(500)')def PLAYLINK(name,url):        req = urllib2.Request(url)        req.add_header('User-Agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')        response = urllib2.urlopen(req)        link=response.read()        response.close()        if 'openload' in link: #openload resolver code written by mortael                 match=re.compile('<iframe src="(.+?)"').findall(link)[0]                req = urllib2.Request(match)                req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537.36')                response = urllib2.urlopen(req)                html=response.read()                response.close()                aastring = re.search(r"<video(?:.|\s)*?<script\s[^>]*?>((?:.|\s)*?)</script", html, re.DOTALL | re.IGNORECASE).group(1)                aastring = aastring.replace("(ﾟДﾟ)[ﾟεﾟ]+(oﾟｰﾟo)+ ((c^_^o)-(c^_^o))+ (-~0)+ (ﾟДﾟ) ['c']+ (-~-~1)+","")                aastring = aastring.replace("((ﾟｰﾟ) + (ﾟｰﾟ) + (ﾟΘﾟ))", "9")                aastring = aastring.replace("((ﾟｰﾟ) + (ﾟｰﾟ))","8")                aastring = aastring.replace("((ﾟｰﾟ) + (o^_^o))","7")                aastring = aastring.replace("((o^_^o) +(o^_^o))","6")                aastring = aastring.replace("((ﾟｰﾟ) + (ﾟΘﾟ))","5")                aastring = aastring.replace("(ﾟｰﾟ)","4")                aastring = aastring.replace("((o^_^o) - (ﾟΘﾟ))","2")                aastring = aastring.replace("(o^_^o)","3")                aastring = aastring.replace("(ﾟΘﾟ)","1")                aastring = aastring.replace("(+!+[])","1")                aastring = aastring.replace("(c^_^o)","0")                aastring = aastring.replace("(0+0)","0")                aastring = aastring.replace("(ﾟДﾟ)[ﾟεﾟ]","\\")                aastring = aastring.replace("(3 +3 +0)","6")                aastring = aastring.replace("(3 - 1 +0)","2")                aastring = aastring.replace("(!+[]+!+[])","2")                aastring = aastring.replace("(-~-~2)","4")                aastring = aastring.replace("(-~-~1)","3")                aastring = aastring.replace("(-~0)","1")                aastring = aastring.replace("(-~1)","2")                aastring = aastring.replace("(-~3)","4")                aastring = aastring.replace("(0-0)","0")                    decodestring = re.search(r"\\\+([^(]+)", aastring, re.DOTALL | re.IGNORECASE).group(1)                decodestring = "\\+"+ decodestring                decodestring = decodestring.replace("+","")                decodestring = decodestring.replace(" ","")                                    decodestring = decode(decodestring)                decodestring = decodestring.replace("\\/","/")                if 'toString' in decodestring:                        base = re.compile(r"toString\(a\+(\d+)", re.DOTALL | re.IGNORECASE).findall(decodestring)[0]                        base = int(base)                        match = re.compile(r"(\(\d[^)]+\))", re.DOTALL | re.IGNORECASE).findall(decodestring)                        for repl in match:                            match1 = re.compile(r"(\d+),(\d+)", re.DOTALL | re.IGNORECASE).findall(repl)                            base2 = base + int(match1[0][0])                            repl2 = base10toN(int(match1[0][1]),base2)                            decodestring = decodestring.replace(repl,repl2)                        decodestring = decodestring.replace("+","")                        decodestring = decodestring.replace("\"","")                        videourl = re.search(r"(http[^\}]+)", decodestring, re.DOTALL | re.IGNORECASE).group(1)                else:                                      videourl = re.search(r"vr\s?=\s?\"|'([^\"']+)", decodestring, re.DOTALL | re.IGNORECASE).group(1)                url=videourl        else:                match=re.compile('hashkey=(.+?)">').findall(link)                stream_url="http://videomega.tv/validatehash.php?hashkey="+ match[0]                url = urlresolver.resolve(stream_url)                url=url.replace('Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25','Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537.36')        liz=xbmcgui.ListItem(name, iconImage=icon,thumbnailImage=icon); liz.setInfo( type="Video", infoLabels={ "Title": name } )        ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=url,listitem=liz)        xbmc.Player ().play(url, liz, False)def decode(encoded):    for octc in (c for c in re.findall(r'\\(\d{2,3})', encoded)):        encoded = encoded.replace(r'\%s' % octc, chr(int(octc, 8)))    return encoded.decode('utf8')def base10toN(num,n):    num_rep={10:'a',         11:'b',         12:'c',         13:'d',         14:'e',         15:'f',         16:'g',         17:'h',         18:'i',         19:'j',         20:'k',         21:'l',         22:'m',         23:'n',         24:'o',         25:'p',         26:'q',         27:'r',         28:'s',         29:'t',         30:'u',         31:'v',         32:'w',         33:'x',         34:'y',         35:'z'}    new_num_string=''    current=num    while current!=0:        remainder=current%n        if 36>remainder>9:            remainder_string=num_rep[remainder]        elif remainder>=36:            remainder_string='('+str(remainder)+')'        else:            remainder_string=str(remainder)        new_num_string=remainder_string+new_num_string        current=current/n    return new_num_stringdef get_params():        param=[]        paramstring=sys.argv[2]        if len(paramstring)>=2:                params=sys.argv[2]                cleanedparams=params.replace('?','')                if (params[len(params)-1]=='/'):                        params=params[0:len(params)-2]                pairsofparams=cleanedparams.split('&')                param={}                for i in range(len(pairsofparams)):                        splitparams={}                        splitparams=pairsofparams[i].split('=')                        if (len(splitparams))==2:                                param[splitparams[0]]=splitparams[1]        return paramdef addDir2(name,url,mode,iconimage,description,fanart):        xbmc.executebuiltin('Container.SetViewMode(50)')        u=sys.argv[0]+"?url="+urllib.quote_plus(url)+"&mode="+str(mode)+"&name="+urllib.quote_plus(name)+"&description="+str(description)        ok=True        liz=xbmcgui.ListItem(name, iconImage=iconimage, thumbnailImage=iconimage)        liz.setInfo( type="Video", infoLabels={ "Title": name, 'plot': description } )        liz.setProperty('fanart_image', fanart)        ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u,listitem=liz,isFolder=True)        return okdef addLink(name,url,mode,iconimage,fanart,description=''):        u=sys.argv[0]+"?url="+urllib.quote_plus(url)+"&mode="+str(mode)+"&name="+urllib.quote_plus(name)+"&description="+str(description)        ok=True        liz=xbmcgui.ListItem(name, iconImage="DefaultFolder.png", thumbnailImage=iconimage)        liz.setInfo( type="Video", infoLabels={ "Title": name, 'plot': description } )        liz.setProperty('fanart_image', fanart)        ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u,listitem=liz,isFolder=False)        return okparams=get_params(); url=None; name=None; mode=None; site=Nonetry: site=urllib.unquote_plus(params["site"])except: passtry: url=urllib.unquote_plus(params["url"])except: passtry: name=urllib.unquote_plus(params["name"])except: passtry: mode=int(params["mode"])except: passprint "Site: "+str(site); print "Mode: "+str(mode); print "URL: "+str(url); print "Name: "+str(name)print paramsif mode==None or url==None or len(url)<1: CATEGORIES()elif mode==1: GETMOVIES(url,name)elif mode==2: GETMOVIESCATS(url,name)elif mode==100: PLAYLINK(name,url)xbmcplugin.endOfDirectory(int(sys.argv[1]))